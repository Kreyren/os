name: Build Nighly Images
#

on:

  schedule:
    - cron: "30 0 * * *"
  workflow_dispatch:

jobs:

  # In case we have a currently active build, cancel it
  Cancel:
    name: "Cancel currently active"
    if: ${{ github.repository_owner == 'Armbian' }}
    runs-on: [ubuntu-latest]
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.11.0
        with:
          all_but_latest: true
          access_token: ${{ secrets.GITHUB_TOKEN }}

  clean:

    if: ${{ github.repository_owner == 'Armbian' }}
    needs: Cancel
    name: "Purge older releases"
    runs-on: [ubuntu-latest]
    steps:

      - uses: dev-drprasad/delete-older-releases@v0.2.0
        with:
          keep_latest: 3           
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Purge old releases of trunk build
        uses: Vucko130/delete-older-releases@v0.2.2
        with:
          keep_latest: 2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Purge action workflow logs
        uses: igorjs/gh-actions-clean-workflow@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          days_old: 10

  fake:
    if: ${{ github.repository_owner == 'Armbian' }}
    runs-on: [ubuntu-latest]
    needs: [ clean ]
    name: Source changes
    outputs:
      changes: ${{steps.list_releases.outputs.changes}}
      version: ${{steps.list_releases.outputs.version}}
      
    steps:

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: armbian/build
          path: build
          clean: false
          ref: main

      - name: "Get latest release version"
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.choice != 'stable'  && github.event.inputs.choice != 'rc' }}
        id: list_releases
        run: |
        
          get_latest_release() {
            curl --silent "https://api.github.com/repos/$1/releases/latest" |
            grep '"tag_name":' |
            sed -E 's/.*"([^"]+)".*/\1/'
          }

          VER=$(echo $(get_latest_release "armbian/os") | rev | cut -d'.' -f 1 | rev | sed 's/^0*//')
          PREFIX=$(echo $(cat build/VERSION | sed "s/-trunk.*//"))
          RELE=$(printf "%04d\n" $((VER+1)))
          echo "version=${PREFIX}.${RELE}" >> $GITHUB_OUTPUT
          echo "version=${PREFIX}.${RELE}"


      - uses: actions/upload-artifact@v3
        with:
          path: changes
          name: changes
          if-no-files-found: ignore

      - uses: actions/upload-artifact@v3
        with:
          path: changes
          name: changes
          if-no-files-found: ignore


  generaterelease:

    needs: [ fake ]
    if: ${{ github.repository_owner == 'Armbian' && needs.fake.outputs.changes != 'true' }}
    runs-on: ubuntu-latest
    name: "Update latest release"
    steps:

      - run: |

          echo "Env: ${{ github.event.inputs.choice }}"
          echo "Env: ${{ github.event.inputs.runner }}"
          echo "Env: ${{ github.event.inputs.sourcerepo }}"
          echo "Branch: ${{ github.event.inputs.branch }}"
          echo "Version: ${{ needs.fake.outputs.version }}"

      - uses: actions/checkout@v3
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.choice != 'stable'  && github.event.inputs.choice != 'rc' }}
        with:
          fetch-depth: 1

      - uses: ClementTsang/delete-tag-and-release@v0.3.1
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.choice != 'stable'  && github.event.inputs.choice != 'rc' }}
        with:
          delete_release: true
          tag_name: latest

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: ncipollo/release-action@v1
        if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.choice != 'stable'  && github.event.inputs.choice != 'rc' }}
        with:
          artifacts: "LICENSE"
          tag: "${{ needs.fake.outputs.version }}"
          name: "Build in progress"
          bodyFile: ".github/Releases-wip.md"
          allowUpdates: true
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

  Minimal:

    needs: generaterelease
    if: ${{ success() && github.repository_owner == 'Armbian' }}
    uses: ./.github/workflows/include.yml

    with:

      config: 'nighly-cli.conf'
      branch: ''
      release: ''
      variant: ''
      version: "23.05.0.0010"

  jobsend:

    name: finish
    needs: [Minimal]
    runs-on: [self-hosted, Linux, local]
    if: ${{ github.repository_owner == 'Armbian' && github.event.inputs.choice != 'stable'  && github.event.inputs.choice != 'rc' }}
    steps:


      - name: Runner prepare
        uses: armbian/actions/runner-prepare@main

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          ref: main

      - name: Get releases
        uses: armbian/actions/make-json@main
        with:
          repository: "build"
          key: ${{ secrets.KEY_TORRENTS }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_UPLOAD }}

      - name: Make build list
        run: |

          echo "VERSION=$(cat VERSION)" >> $GITHUB_ENV
          cat ".github/Releases.md" >> README.tmp
          echo -en "&nbsp;\n\n" >> README.tmp
          echo "| Image &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | GPG | SHA | Release | Branch | &nbsp;&nbsp;&nbsp; Variant | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Size | &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kernel |" >> README.tmp
          echo "| --- | :--: | :--: | --: | --: | --: | --: | --: |" >> README.tmp
          cat json/build.md >> README.tmp
          echo -en "\n &nbsp;\n" >> README.tmp

      - uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.VERSION }}"
          bodyFile: "README.tmp"
          name: "Armbian ${{ env.VERSION }}"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update mirrors
        uses: armbian/actions/triggers@main
        with:
          KEY: ${{ secrets.KEY_SYNC_MIRRORS }}
          USER: ${{ secrets.USER_REPOSITORY }}
          HOST: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}

      - name: Sync images & recreate torrents
        uses: armbian/actions/triggers@main
        with:
          KEY: ${{ secrets.KEY_RECREATE_TORRENT }}
          USER: ${{ secrets.USER_REPOSITORY }}
          HOST: ${{ secrets.HOST_REPOSITORY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}
